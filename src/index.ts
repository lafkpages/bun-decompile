import assert from "node:assert/strict";
import { BUN_TRAILER } from "./constants";

export interface BundledFile {
  path: string;
  contents: Buffer;
}

export function extractBundledFiles(compiledBinaryData: Buffer) {
  // Note: reverse engineering
  // bun/src/StandaloneModuleGraph.zig/StandaloneModuleGraph/toBytes

  // Check that the executable has the right trailer
  const trailer = compiledBinaryData.toString(
    "utf-8",
    compiledBinaryData.length - 8 - BUN_TRAILER.length,
    compiledBinaryData.length - 8
  );
  assert.equal(
    trailer,
    BUN_TRAILER,
    "Invalid trailer, either the binary is corrupted or it's not an executable file generated by `bun build --compile`."
  );

  const totalByteCount = compiledBinaryData.readUint32LE(
    compiledBinaryData.length - 8
  );
  assert.equal(
    compiledBinaryData.length,
    totalByteCount,
    "Total byte count mismatch"
  );

  const offsetByteCount = compiledBinaryData.readUint32LE(
    compiledBinaryData.length - 48
  );

  // Not sure what this is for
  const entrypointId = compiledBinaryData.readUint32LE(
    compiledBinaryData.length - 44
  );

  const modulesPtrOffset = compiledBinaryData.readUint32LE(
    compiledBinaryData.length - 40
  );

  const modulesPtrLength = compiledBinaryData.readUint32LE(
    compiledBinaryData.length - 36
  );

  const modulesStart = compiledBinaryData.length - (offsetByteCount + 48);
  const modulesEnd = modulesStart + modulesPtrOffset;
  const modulesData = compiledBinaryData.subarray(modulesStart, modulesEnd);

  const modulesMetadataStart = modulesEnd;

  const bundledFiles: BundledFile[] = [];
  let currentOffset = 0;
  for (let i = 0; i < modulesPtrLength / 32; i++) {
    const modulesMetadataOffset = modulesMetadataStart + i * 32;
    const pathLength = compiledBinaryData.readUint32LE(
      modulesMetadataOffset + 4
    );
    const contentsLength = compiledBinaryData.readUint32LE(
      modulesMetadataOffset + 12
    );

    const path = modulesData.toString(
      "utf-8",
      currentOffset,
      currentOffset + pathLength
    );
    const contents = modulesData.subarray(
      currentOffset + pathLength,
      currentOffset + pathLength + contentsLength
    );

    bundledFiles.push({ path, contents });

    currentOffset += pathLength + contentsLength;
  }

  return bundledFiles;
}
