import {
  BUN_TRAILER,
  BUN_VERSION_MATCH,
  BUN_VERSION_MATCH_OLD,
  BUNFS_ROOT,
  BUNFS_ROOT_OLD,
} from "./constants";

export interface BundledFile {
  path: string;
  contents: ArrayBuffer;
  sourcemap?: {
    version: 3;
    file: string;
    debugId?: string;
    mappings: string;
    sources: string[];
  };
}

const corruptionMessage =
  ". Either the binary is corrupted or it's not an executable file generated by `bun build --compile`.";

export class InvalidExecutableError extends Error {
  constructor(msg = "Invalid executable") {
    super(msg + corruptionMessage);
    this.name = "InvalidExecutableError";
  }
}

export class InvalidTrailerError extends InvalidExecutableError {
  constructor() {
    super("Invalid executable trailer");
    this.name = "InvalidTrailerError";
  }
}

export class TotalByteCountMismatchError extends InvalidExecutableError {
  constructor() {
    super("Executable byte count mismatch");
    this.name = "TotalByteCountMismatchError";
  }
}

export class VersionNotFoundError extends InvalidExecutableError {
  constructor() {
    super("Version not found in executable");
    this.name = "VersionNotFoundError";
  }
}

export interface ExtractBundledFilesOptions {
  normaliseEntrypointFileName?: boolean;
}

export function extractBundledFiles(
  compiledBinaryData: DataView | ArrayBuffer,
  options: ExtractBundledFilesOptions = {},
) {
  options = {
    normaliseEntrypointFileName: true,
    ...options,
  };

  if (compiledBinaryData instanceof ArrayBuffer) {
    compiledBinaryData = new DataView(compiledBinaryData);
  }

  const decoder = new TextDecoder();

  // Note: reverse engineering
  // bun/src/StandaloneModuleGraph.zig/StandaloneModuleGraph/toBytes

  // Check that the executable has the right trailer
  const trailer = decoder.decode(
    compiledBinaryData.buffer.slice(
      compiledBinaryData.byteLength - 8 - BUN_TRAILER.length,
      compiledBinaryData.byteLength - 8,
    ),
  );
  if (trailer !== BUN_TRAILER) {
    throw new InvalidTrailerError();
  }

  const totalByteCount = compiledBinaryData.getUint32(compiledBinaryData.byteLength - 8, true);
  if (compiledBinaryData.byteLength !== totalByteCount) {
    throw new TotalByteCountMismatchError();
  }

  const entrypointId = compiledBinaryData.getUint32(compiledBinaryData.byteLength - 44, true);

  const modulesPtrOffset = compiledBinaryData.getUint32(compiledBinaryData.byteLength - 40, true);
  const modulesPtrLength = compiledBinaryData.getUint32(compiledBinaryData.byteLength - 36, true);

  const modulesStart = getModulesStart(compiledBinaryData);
  const modulesEnd = modulesStart + modulesPtrOffset;
  const modulesData = compiledBinaryData.buffer.slice(modulesStart, modulesEnd);

  const modulesMetadataStart = modulesEnd;

  const payloadSize =
    compiledBinaryData.getUint32(compiledBinaryData.byteLength - 68, true) +
    compiledBinaryData.getUint32(compiledBinaryData.byteLength - 64, true);
  const newFormat = payloadSize + 1 === modulesPtrOffset;
  const modulesMetadataChunkSize = newFormat ? 28 : 32;

  const bundledFiles: BundledFile[] = [];
  let currentOffset = 0;
  for (let i = 0; i < modulesPtrLength / modulesMetadataChunkSize; i++) {
    const isEntrypoint = i === entrypointId;

    const modulesMetadataOffset = modulesMetadataStart + i * modulesMetadataChunkSize;
    const pathLength = compiledBinaryData.getUint32(modulesMetadataOffset + 4, true);
    const contentsLength = compiledBinaryData.getUint32(modulesMetadataOffset + 12, true);
    const sourcemapLength = compiledBinaryData.getUint32(modulesMetadataOffset + 20, true);

    let path = decoder.decode(modulesData.slice(currentOffset, currentOffset + pathLength));
    if (options.normaliseEntrypointFileName && isEntrypoint) {
      path = path.replace(/\/[^\/\\]+$/, "/index.js");
    }
    path = removeBunfsRootFromPath(path);
    if (path[0] !== "/") {
      throw new InvalidExecutableError("Invalid path in bundled file in executable");
    }
    path = removeLeadingSlash(path);

    const contentsStart = currentOffset + pathLength + (newFormat ? 1 : 0);
    const contentsEnd = contentsStart + contentsLength;
    const contents = modulesData.slice(contentsStart, contentsEnd);

    let sourcemap: BundledFile["sourcemap"];
    if (sourcemapLength) {
      const sourcemapMappingsLength = compiledBinaryData.getUint32(
        modulesStart + contentsEnd + 5,
        true,
      );

      if (sourcemapMappingsLength) {
        const sourcemapSourcesCount = compiledBinaryData.getUint32(
          modulesStart + contentsEnd + 1,
          true,
        );

        const mappingsStart = contentsEnd + 9 + sourcemapSourcesCount * 16;
        const mappingsEnd = mappingsStart + sourcemapMappingsLength;

        const contentsEndData = decoder.decode(contents.slice(contents.byteLength - 49));
        const debugId = contentsEndData.match(/^\/\/# debugId=([a-fA-F0-9-]{12,})$/m)?.[1];
        // RegEx copied from the sourcemaps debug-id spec:
        // https://github.com/tc39/source-map/blob/main/proposals/debug-id.md#appendix-a-self-description-of-source-maps-and-javascript-files

        sourcemap = {
          version: 3,
          file: path,
          debugId,
          mappings: decoder.decode(modulesData.slice(mappingsStart, mappingsEnd)),
          sources: [],
        };

        let sourceStart = mappingsEnd;
        for (let j = 0; j < sourcemapSourcesCount; j++) {
          const sourcemapSourceLength = compiledBinaryData.getUint32(
            modulesStart + contentsEnd + 13 + j * 8,
            true,
          );

          sourcemap.sources.push(
            decoder.decode(modulesData.slice(sourceStart, sourceStart + sourcemapSourceLength)),
          );

          sourceStart += sourcemapSourceLength;
        }
      }
    }

    const bundledFile: BundledFile = { path, contents, sourcemap };
    if (isEntrypoint) {
      bundledFiles.unshift(bundledFile);
    } else {
      bundledFiles.push(bundledFile);
    }

    currentOffset += pathLength + contentsLength + sourcemapLength + (newFormat ? 2 : 0);
  }

  return bundledFiles;
}

function getModulesStart(compiledBinaryData: DataView) {
  if (compiledBinaryData.byteLength <= 48) {
    return 0;
  }

  const offsetByteCount = compiledBinaryData.getUint32(compiledBinaryData.byteLength - 48, true);

  return compiledBinaryData.byteLength - (offsetByteCount + 48);
}

function removeBunfsRootFromPath(path: string) {
  if (path.startsWith(BUNFS_ROOT)) {
    return path.slice(BUNFS_ROOT.length);
  }
  if (path.startsWith(BUNFS_ROOT_OLD)) {
    return path.slice(BUNFS_ROOT_OLD.length);
  }
  throw new Error(`Path does not start with Bun-fs root: ${path}`);
}

export function removeLeadingSlash(path: string) {
  return path.replace(/^\/?(?:\.\/)?/, "");
}

export interface BunVersion {
  version: string;
  revision: string;
  newFormat?: boolean;
}

function getExecutableVersionNew(data: Uint8Array, modulesStart: number): BunVersion {
  const versionIndex = data.findIndex((_, index) => {
    if (index >= modulesStart) {
      return false;
    }

    for (let i = 0; i < BUN_VERSION_MATCH.length; i++) {
      if (data[index + i] !== BUN_VERSION_MATCH.charCodeAt(i)) {
        return false;
      }
    }

    return true;
  });

  if (versionIndex === -1) {
    throw new VersionNotFoundError();
  }

  const versionEndIndex = data.indexOf(27, versionIndex + BUN_VERSION_MATCH.length);

  if (versionEndIndex <= 0) {
    throw new VersionNotFoundError();
  }

  const decoder = new TextDecoder();
  const versionString = decoder.decode(
    data.slice(versionIndex + BUN_VERSION_MATCH.length, versionEndIndex),
  );

  const [, version, revision] = versionString.match(/^(.+) \((.+)\)$/) ?? [];

  if (!version) {
    throw new VersionNotFoundError();
  }

  return {
    version,
    revision,
  };
}

function getExecutableVersionOld(data: Uint8Array, modulesStart: number): BunVersion {
  const versionIndex = data.findIndex((_, index) => {
    if (index >= modulesStart) {
      return false;
    }

    for (let i = 0; i < BUN_VERSION_MATCH_OLD.length; i++) {
      if (data[index + i] !== BUN_VERSION_MATCH_OLD.charCodeAt(i)) {
        return false;
      }
    }

    return true;
  });

  if (versionIndex === -1) {
    throw new VersionNotFoundError();
  }

  const versionEndIndex = data.indexOf(58, versionIndex + BUN_VERSION_MATCH_OLD.length);

  if (versionEndIndex <= 0) {
    throw new VersionNotFoundError();
  }

  const decoder = new TextDecoder();
  const versionString = decoder.decode(
    data.slice(versionIndex + BUN_VERSION_MATCH_OLD.length, versionEndIndex),
  );

  const [, version, revision] = versionString.match(/^(.+) \((.+)\)/) ?? [];

  if (!version) {
    throw new VersionNotFoundError();
  }

  return {
    version,
    revision,
  };
}

export function getExecutableVersion(data: Uint8Array | ArrayBuffer): BunVersion {
  if (data instanceof ArrayBuffer) {
    data = new Uint8Array(data);
  }

  const modulesStart = getModulesStart(new DataView(data.buffer));

  try {
    return { ...getExecutableVersionNew(data, modulesStart), newFormat: true };
  } catch (e) {
    if (e instanceof VersionNotFoundError) {
      return { ...getExecutableVersionOld(data, modulesStart), newFormat: false };
    }

    throw e;
  }
}
